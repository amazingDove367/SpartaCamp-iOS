<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//struct User {
//    var name: String
//    var age: Int
//}
//
//var sangyeon = User(name: "Sangyeon", age: 26) 
//var mimi = User(name: "Mimi", age: 29) 
//
//print(sangyeon.age) // 26
//print(mimi.age) // 29
//
//sangyeon.age = 13
//mimi.age = 21
//
//print(sangyeon.age) // 13
//print(mimi.age) // 21
//
//


//class User {
//    init(name: String, age: Int) {
//        self.name = name
//        self.age = age
//    }
//    
//    var name: String
//    var age: Int
//}
//
//var sangyeon = User(name: "User Name", age: 100)
//var mimi = sangyeon
//
//print("[sangyeon] \(sangyeon.name), \(sangyeon.age)")
//print("[mimi] \(mimi.name), \(mimi.age)")
//
//sangyeon.age = 50
//
//print("[sangyeon] \(sangyeon.name), \(sangyeon.age)")
//print("[mimi] \(mimi.name), \(mimi.age)")
//
//mimi.name = "Mimi"
//
//print("[sangyeon] \(sangyeon.name), \(sangyeon.age)")
//print("[mimi] \(mimi.name), \(mimi.age)")


//
//import Foundation
//
//protocol Greetable {
//    func greet()
//}
//
//struct Person: Greetable {
//    func greet() {
//        print("Hello, This is Struct Person")
//    }
//}
//
//class Robot: Greetable {
//    func greet() {
//        print("Hello, This is Robot no.\(UUID())")
//    }
//}
//
//var person = Person()
//person.greet()
//
//var robot = Robot()
//robot.greet()
//
//extension Greetable {
//    func greet() {
//        print("Hello!")
//    }
//}
//
//person.greet()



//protocol Greetable {
//    func greet()
//}
//
//struct Person: Greetable { }
//var person = Person()
//person.greet()
//
//extension Greetable {
//    func greet() {
//        print("Hello!")
//    }
//}
//
//struct Alien: Greetable {
//    func greet() {
//        print("Hello, from Alienumhahaha")
//    }
//
//}
//var a = Alien()
//a.greet()

//person.greet()
//
//
//
//class Robot: Greetable {
//    func greet() {
//        print("Hello, This is Robot no.\(UUID())")
//    }
//}



// 스택
//struct Stack&lt;String&gt; {
//    private var elements: [String] = []
//    
//    mutating func push(_ element: String) {
//        elements.append(element)
//    }
//    
//    mutating func pop() -&gt; String? {
//        return elements.popLast()
//    }
//    
//    mutating func lastElement() -&gt; String? {
//        return elements.isEmpty ? nil : elements[elements.count - 1]
//    }
//}
//
//var s = Stack&lt;String&gt;()
//s.push("test")
//s.push("abc")
//
//print(s.lastElement())




// 순환참조
//class Person {
//    var name: String
//    var pet: Pet?
//    
//    init(name: String) {
//        self.name = name
//    }
//    deinit { print("\(name) deinitialized") }
//}
//
//class Pet {
//    weak var owner: Person?
//    deinit { print("Owner \(owner) deinitialized") }
//}
//
//var mimi: Person?
//var toto: Pet?
//
//mimi = Person(name: "mimi")
//toto = Pet()
//
//mimi!.pet = toto
//toto!.owner = mimi
//
//mimi = nil 
//toto = nil


// 클로저
//let numbers = [1, 2, 3, 4, 5]
//let doubled = numbers.map { $0 * 2 }
//print(doubled)
 
//var counter = 0
//let incrementCounter = {
//    counter += 1
//}
//incrementCounter()
//incrementCounter()
//print(counter) // 출력: ?


// OOP
//class Animal {
//    var name: String
//    
//    init(name: String) {
//        self.name = name
//    }
//    
//    func makeSound() { }
//}
//
//class Dog: Animal {
//    override func makeSound() {
//        print("Bark!")
//    }
//}
//
//class Cat: Animal {
//    override func makeSound() {
//        print("Meow!")
//    }
//}
//
//
//var toto = Dog(name: "toto")
//var nani = Cat(name: "nani")
//
////toto.makeSound()
////nani.makeSound()
//
//var animalArr: [Animal] = [toto, nani]
//var makeSound = animalArr.map { $0.makeSound() }



// 비동기 프로그래밍
//import Foundation
//DispatchQueue.global().async {
//    // task : 데이터 로드
//    
//    DispatchQueue.main.asyncAfter(deadline: .now() + 0.3, execute: { print("데이터 로드 완료") })
//}



// generic
//func swapValues&lt;T&gt;(_ a: inout T, _ b: inout T) {
//    let temp = a
//    a = b
//    b = temp
//}
//
//var ten = 10
//var twenty = 20
//print("ten: \(ten), twenty: \(twenty)")
//
//swapValues(&amp;ten, &amp;twenty)
//print("ten: \(ten), twenty: \(twenty)")



// combine
import Combine

// 1
//let numbers = [10, 20, 30, 40, 50].publisher
//
//numbers
//    .map { $0 * 2 }
//    .sink { print($0) }

//// 2
//let justPublisher = Just(100)
//
//justPublisher
//    .map { $0 + 50 }
//    .sink { print($0) }

// 3
import Foundation

struct Todo: Codable {
    let title: String
}

let url = URL(string: "https://jsonplaceholder.typicode.com/todos/1")!
var cancellable: AnyCancellable?

cancellable = URLSession.shared.dataTaskPublisher(for: url)
//    .map { $0.data }
    .map { data, response in
        return data
    }
    .decode(type: Todo.self, decoder: JSONDecoder())
    .sink(
        receiveCompletion: { print("completion: \($0)") }, receiveValue: { print("title: \($0)")}
    )



var subscriptions = Set&lt;AnyCancellable&gt;()





</string>
			<key>ModifiedRange</key>
			<string>{0, 4884}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
